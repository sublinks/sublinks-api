plugins {
  id 'java'
  id 'org.springframework.boot' version '3.3.2'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'jacoco'
}

group = 'com.sublinks'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}


dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.flywaydb:flyway-core'
  implementation 'org.flywaydb:flyway-mysql'
  implementation 'org.flywaydb:flyway-database-postgresql'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

  annotationProcessor "org.hibernate:hibernate-jpamodelgen:6.5.2.Final"
  implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.1'
  // Springdoc for Swagger API Docs
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

  implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

  implementation 'org.springframework.boot:spring-boot-starter-webflux'

  implementation 'org.jsoup:jsoup:1.18.1'

  implementation 'com.github.bastiaanjansen:otp-java:2.0.3'

  implementation 'cn.apiclub.tool:simplecaptcha:1.2.2'
  implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'

  implementation 'org.springframework.boot:spring-boot-starter-mail:3.3.2'
  implementation 'org.apache.commons:commons-text:1.12.0'
  implementation 'org.thymeleaf:thymeleaf:3.1.2.RELEASE'
  implementation 'org.thymeleaf:thymeleaf-spring6:3.1.2.RELEASE'

  implementation "org.mapstruct:mapstruct:1.5.5.Final"
  compileOnly 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
  compileOnly 'org.mapstruct:mapstruct:1.5.5.Final'
  compileOnly 'org.mapstruct.extensions.spring:mapstruct-spring-annotations:1.1.1'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
  annotationProcessor 'org.projectlombok:lombok'
  annotationProcessor 'org.mapstruct.extensions.spring:mapstruct-spring-extensions:1.1.1'
  testAnnotationProcessor 'org.mapstruct.extensions.spring:mapstruct-spring-extensions:1.1.1'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'org.postgresql:postgresql:42.7.3'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
  testImplementation 'org.mockito:mockito-core:5.+'
}

tasks.named("test") {
  useJUnitPlatform()

  testLogging {
    events "PASSED", "SKIPPED", "FAILED"
  }
}

tasks.named("bootBuildImage") {
  imageName.set("ghcr.io/sublinks/${project.name}:${project.version}")
  publish = true
  docker {
    publishRegistry {
      username = System.getenv('DOCKER_USER')
      password = System.getenv('DOCKER_PASSWORD')
    }
  }
}

tasks.named("jar") {
  // Disable generation of the "plain" jar file and just generate the fat jar file
  // See https://docs.spring.io/spring-boot/docs/3.2.3/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
  enabled = false
}
